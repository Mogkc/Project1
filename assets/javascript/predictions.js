var generatesOn = {
    //Will be filled by correlatePredictions
};

/**
 * 
 * @param {moment} endDate Optional, if empty is set to yesterday
 * @param {moment} startDate Optional, requires endDate. If empty defaults to 30 days prior to endDate
 */
var setDataSpan = function(endDate, startDate) {
    if(endDate == undefined) {
        endDate = moment().subtract(1, 'days');
    }
    if(startDate == undefined) {
        startDate = moment().subtract(30, 'days');
    }

    return { start: startDate,
        end: endDate };
};

/**
 * Gets the history for energy production and weather, then calls to correlate them
 */
var getWeatherAndEnergyHist = function() {
    var span = setDataSpan();
    getProductionHistory("961882", span.start.format("X"), span.end.format("X"), function(prodHist) {
        showWeather("1600 Amphitheatre Parkway, Mountain View,California", span.start.format("X"), span.end.format("X"), function(weathHist) {
            //loop through them creating table rows for historical data, then pass them to correlatePredictions
            console.log("W length: " + weathHist.length + " P length: " + prodHist.length);
            for(let i = 0; i < weathHist.length && i < prodHist.length; i++) {
                var day = prodHist[i].date;
                //Figure out images later
                displayRow(moment.unix(element.dateUnix), "", weathHist[day].summary, element.powerGenerated);
            }
            correlateProduction(prodHist, weathHist);
        });
    });
}

/**
 * 
 * @param {array} weatherHist The previous 30 days' weather, oldest at 0
 * @param {object array} energyHist The previous 30 days' dates and energy production, oldest at 0
 */
var correlateProduction = function(weatherHist, energyHist, displayFuture) {
    /* TO BE MODIFIED BASED ON API USED FOR WEATHER */

    //Create variables for averaging energy based on weather
    //i.e.
    var numSun = 0, genSun = 0;
    var numPSun = 0, genPSun = 0;
    //etc

    //Use sort the energy generated by that day's weather
    for(let i = 0; i < weatherHist.length && i < energyHist.length; i++) {
        var day = energyHist[i].date;
        //weatherHist array uses day as 
        switch (weatherHist[day].cloud-cover) {
            case "sunny":
                numSun++;
                genSun += energyHist[i].powerGenerated;
                break;
            case "Partially Sunny":
                numPSun++;
                genPSun += energyHist[i].powerGenerated;
                break;
            //etc
        }
    }

    //Update predictions using the sorted data's averages
    generatesOn.sunny = (genSun / numSun);
    generatesOn.partiallySunny = (genPSun / numPSun);
    //etc
};
