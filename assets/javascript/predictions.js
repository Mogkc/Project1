var generatesOn = {
    //Will be filled by correlatePredictions
};

/**
 * Gets the history for energy production and weather, then calls to correlate them
 * @param {moment} endDate Optional, if empty is set to yesterday
 * @param {moment} startDate Optional, requires endDate. If empty defaults to 30 days prior to endDate
 */
var getWeatherAndEnergyHist = function (endDate, startDate) {
    var span = setDataSpan();
    if (endDate == undefined) {
        endDate = moment().subtract(1, 'days');
    }
    if (startDate == undefined) {
        startDate = moment().subtract(30, 'days');
    }

    getProductionHistory("961882", startDate.format("X"), endDate.format("X"), function (prodHist) {
        showWeather("1600 Amphitheatre Parkway, Mountain View,California", span.start.format("X"), span.end.format("X"), function (weathHist) {
            //loop through them creating table rows for historical data, then pass them to correlatePredictions
            console.log("W length: " + weathHist.length + " P length: " + prodHist.length);
            for (let i = 0; i < weathHist.length && i < prodHist.length; i++) {
                var day = prodHist[i].date;
                //Figure out images later
                displayRow(moment.unix(element.dateUnix), "", weathHist[day].summary, element.powerGenerated);
            }
            correlateProduction(prodHist, weathHist);
        });
    });
}

/**
 * 
 * @param {array} weatherHist The previous 30 days' weather, oldest at 0
 * @param {object array} energyHist The previous 30 days' dates and energy production, oldest at 0
 * @param {function} displayFuture The function DisplayFuture, which uses the correlated data to create new table rows
 */
var correlateProduction = function (weatherHist, energyHist, displayFuture) {
    //Create variables for averaging energy based on weather. M is mostly
    var numSunny = 0, genSunny = 0;
    var numMSunny = 0, genMSunny = 0;
    var numMCloudy = 0, genMCloudy = 0;
    var numCloudy = 0, genCloudy = 0;
    

    //Use sort the energy generated by that day's weather
    for (let i = 0; i < weatherHist.length && i < energyHist.length; i++) {
        var day = energyHist[i].date;
        //weatherHist array uses day as key. Cloudcover range is 0-1
        if(weatherHist[day].cloudCover < .25) {
            numSunny++;
            genSunny += energyHist[i];
        } else if(weatherHist[day].cloudCover < .5) {
            numMSunny++;
            genMSunny += energyHist[i];
        } else if(weatherHist[day].cloudCover < .7) {
            numMCloudy++;
            genMCloudy += energyHist[i];
        } else {
            numCloudy++;
            genCloudy += energyHist[i];
        }
    }

    //Update predictions using the sorted data's averages
    generatesOn.sunny = (genSun / numSun);
    generatesOn.mostlySunny = (genMSun / numMSun);
    generatesOn.mostlyCloudy = (genMCloudy / numMCloudy);
    generatesOn.cloudy = (genCloudy / numMCloudy);

    displayFuture(7);
};
